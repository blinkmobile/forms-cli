const uuid = require('uuid/v4')

angular.module('<%moduleName%>').factory('<%moduleName%>Model',
['$localForage',
function BlinkModelFactory ($localForage) {
  function <%moduleName%>Model (modelObj) {
    modelObj ? this.set(modelObj) : this.reset()
  }

  <%moduleName%>Model.prototype.defaults = function () {
    const defaults = { }
    <%#_elements%>
    defaults.<%name%> = <% &value%>
    <%/_elements%>
    return defaults
  }

  <%moduleName%>Model.prototype.reset = function () {
    this.set(this.defaults())
  }

  <%moduleName%>Model.prototype.set = function (modelObj) {
    for(let prop in modelObj) {
      if (modelObj.hasOwnProperty(prop)) {
        this[prop] = modelObj[prop]
      }
    }
  }

  <%moduleName%>Model.prototype.create = function (modelObj) {
    const model = new <%moduleName%>Model()
    model.set(modelObj)

    return model
  }

  <%moduleName%>Model.prototype.saveDraft = function (model) {
    if (!model._uuid) {
      model._uuid = uuid()
    }

    return $localForage.setItem(model._uuid, model)
  }

  <%moduleName%>Model.prototype.loadDraft = function (uuid) {
    return $localForage.getItem(uuid).then((item) => {
      this.set(item)

      return this
    })
  }

  return new <%moduleName%>Model()
}])
